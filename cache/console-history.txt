console.log("MessageReleased events:", await scheduledMessage.queryFilter(scheduledMessage.filters.MessageReleased(), await ethers.provider.getBlockNumber() - 18, await ethers.provider.getBlockNumber()));
await triggerWithA.transferAndTrigger(accountB.address, { value: ethers.utils.parseEther("0.1") });
console.log("MessageReleased events:", await scheduledMessage.queryFilter(scheduledMessage.filters.MessageReleased(), await ethers.provider.getBlockNumber() - 18, await ethers.provider.getBlockNumber()));
await triggerWithA.transferAndTrigger(accountB.address, { value: ethers.utils.parseEther("0.1") });
console.log("MessageReleased events:", await scheduledMessage.queryFilter(scheduledMessage.filters.MessageReleased(), await ethers.provider.getBlockNumber() - 18, await ethers.provider.getBlockNumber()));
await triggerWithA.transferAndTrigger(accountB.address, { value: ethers.utils.parseEther("0.1") });
console.log("MessageReleased events:", events6);
const events6 = await scheduledMessage5.queryFilter(filter5, currentBlock5 - 18, currentBlock5);
console.log("MessageReleased events:", events5);
const events5 = await scheduledMessage5.queryFilter(filter5, currentBlock5 - 18, currentBlock);
const filter5 = scheduledMessage5.filters.MessageReleased();
const currentBlock5 = await ethers.provider.getBlockNumber();
const scheduledMessage5 = await ethers.getContractAt("ScheduledMessage", deployedScheduleAddressCpy);
console.log("MessageReleased events:", events3);
const events3 = await scheduledMessage2.queryFilter(filter, currentBlock - 10, currentBlock);
await triggerWithA.transferAndTrigger(accountB.address, { value: ethers.utils.parseEther("0.1") });
console.log("MessageReleased events:", events2);
const events2 = await scheduledMessage2.queryFilter(filter, currentBlock - 10, currentBlock);
console.log("MessageReleased events:", events);
await triggerWithA.transferAndTrigger(accountB.address, { value: ethers.utils.parseEther("0.1") });
clear
console.log("MessageReleased events:", events);
const events = await scheduledMessage2.queryFilter(filter, currentBlock - 10, currentBlock);
const filter = scheduledMessage2.filters.MessageReleased();
const currentBlock = await ethers.provider.getBlockNumber();
const scheduledMessage2 = await ethers.getContractAt("ScheduledMessage", deployedScheduleAddressCpy);
const deployedScheduleAddressCpy = "0x5FbDB2315678afecb367f032d93F642f64180aa3";
await triggerWithA.transferAndTrigger(accountB.address, { value: ethers.utils.parseEther("0.1") });
const triggerWithA = ethTransferTrigger.connect(accountA);
const [accountA, accountB] = await ethers.getSigners();
const ethTransferTrigger = await ethers.getContractAt("ETHTransferTrigger", deployedTransferTriggerAddress);
const deployedTransferTriggerAddress = "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512";
await tx.wait();
const tx = await scheduledMessage.scheduleMessage(encryptedMessage, 5, hint);
const hint = "Vratnice";
const scheduledMessage = await ethers.getContractAt("ScheduledMessage", deployedScheduleAddress);
const encryptedMessage = "K/7D5HCgz/qwrJeJmKoMLN/xxOSaHXsgU68dvK6+QwM8UjZJS3PZY0hskOSpDwtwiE8DXhaou7z/WLEOgf+DJQCp+AhQ/FuQNzb+TEykv1GYtkqfVoVc5vbJqvkp2IJUA6cXzoo2HD7UfkuGY5X+hxkllkh5yiRvdXmEPS8k1nHbOglTIK2K6p5oxOZGGVbdAejp6keAbSsZbGWGHw+NVssudGYAgCTUvJSq5FoV3Avc1DMCNxekpU/WCkbOO9DNGdOiAInd6Bi7FH3z4TKB7WAWC5XkKmQMtj7CWp/oPBbfdq4LdBUfJEcin+cHDQQYPPF84G8SM69RuemKDXowSUH72E5OtXHURo+nqhS/VLfP5CFxmaBHHfYrXp8O3wa74F4WPpoqnuHxCCvxmF1yHaVH9TtxpgDDKmbwNKxciWn8FJAaIS0QK0le12+3Oku+4NnOihN6FKW87AOP2pqTz2OXo1regKnBbJXizfQWQ98bvGmVS1JuOMqBYTlwlFuqGckwFyPNri3D0iay3+OxdJQtTNkVAUrD3O6rY5yMEQeNOUmnMEDOMI4kRcSb35DtQZFkXVMqayKYHZvRsR6fcwnMcwx5fRXWui6k9vzwvNdt9z5/wwO1ckkA7qmpRDhJ7YWtYzIIfRk4suy+HOyoTCu8vI4b5tGquUfuexw2hXA=";
const deployedScheduleAddress = "0x5FbDB2315678afecb367f032d93F642f64180aa3";
exit
console.log("MessageReleased events:", events);
const events = await scheduledMessage2.queryFilter(filter, currentBlock - 10, currentBlock);
const filter = scheduledMessage2.filters.MessageReleased();
const currentBlock = await ethers.provider.getBlockNumber();
const scheduledMessage2 = await ethers.getContractAt("ScheduledMessage", deployedScheduleAddressCpy);
const deployedScheduleAddressCpy = "0x5FbDB2315678afecb367f032d93F642f64180aa3";
await triggerWithA.transferAndTrigger(accountB.address, { value: ethers.utils.parseEther("0.1") });
const triggerWithA = ethTransferTrigger.connect(accountA);
const [accountA, accountB] = await ethers.getSigners();
const ethTransferTrigger = await ethers.getContractAt("ETHTransferTrigger", deployedTransferTriggerAddress);
const deployedTransferTriggerAddress = "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512";
await tx.wait();
const tx = await scheduledMessage.scheduleMessage(encryptedMessage, 3, hint);
const hint = "Vratnice";
const scheduledMessage = await ethers.getContractAt("ScheduledMessage", deployedScheduleAddress);
const encryptedMessage = "K/7D5HCgz/qwrJeJmKoMLN/xxOSaHXsgU68dvK6+QwM8UjZJS3PZY0hskOSpDwtwiE8DXhaou7z/WLEOgf+DJQCp+AhQ/FuQNzb+TEykv1GYtkqfVoVc5vbJqvkp2IJUA6cXzoo2HD7UfkuGY5X+hxkllkh5yiRvdXmEPS8k1nHbOglTIK2K6p5oxOZGGVbdAejp6keAbSsZbGWGHw+NVssudGYAgCTUvJSq5FoV3Avc1DMCNxekpU/WCkbOO9DNGdOiAInd6Bi7FH3z4TKB7WAWC5XkKmQMtj7CWp/oPBbfdq4LdBUfJEcin+cHDQQYPPF84G8SM69RuemKDXowSUH72E5OtXHURo+nqhS/VLfP5CFxmaBHHfYrXp8O3wa74F4WPpoqnuHxCCvxmF1yHaVH9TtxpgDDKmbwNKxciWn8FJAaIS0QK0le12+3Oku+4NnOihN6FKW87AOP2pqTz2OXo1regKnBbJXizfQWQ98bvGmVS1JuOMqBYTlwlFuqGckwFyPNri3D0iay3+OxdJQtTNkVAUrD3O6rY5yMEQeNOUmnMEDOMI4kRcSb35DtQZFkXVMqayKYHZvRsR6fcwnMcwx5fRXWui6k9vzwvNdt9z5/wwO1ckkA7qmpRDhJ7YWtYzIIfRk4suy+HOyoTCu8vI4b5tGquUfuexw2hXA=";
const deployedScheduleAddress = "0x5FbDB2315678afecb367f032d93F642f64180aa3";
console.log("MessageReleased events:", events);
const events = await scheduledMessage2.queryFilter(filter, currentBlock - 10, currentBlock);
const filter = scheduledMessage2.filters.MessageReleased();
const currentBlock = await ethers.provider.getBlockNumber();
const scheduledMessage2 = await ethers.getContractAt("ScheduledMessage", deployedScheduleAddressCpy);
const deployedScheduleAddressCpy = "0x5FbDB2315678afecb367f032d93F642f64180aa3";
// View messages
await tx4.wait();
const tx4 = await triggerWithA.transferAndTrigger(accountB.address, { value: ethers.utils.parseEther("0.1") });
const triggerWithA = ethTransferTrigger.connect(accountA);
const [accountA, accountB] = await ethers.getSigners();
const ethTransferTrigger = await ethers.getContractAt("ETHTransferTrigger", deployedTransferTriggerAddress);
const deployedTransferTriggerAddress = "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512";
// Send crypto
console.log("MessageReleased events:", events);
const events = await scheduledMessage.queryFilter(filter, currentBlock - 10, currentBlock);
const filter = scheduledMessage.filters.MessageReleased();
const currentBlock = await ethers.provider.getBlockNumber();
const scheduledMessage2 = await ethers.getContractAt("ScheduledMessage", deployedScheduleAddressCpy);
const deployedScheduleAddressCpy = "0x5FbDB2315678afecb367f032d93F642f64180aa3";
// View messages
await tx4.wait();
const tx4 = await triggerWithA.transferAndTrigger(accountB.address, { value: ethers.utils.parseEther("0.1") });
const triggerWithA = ethTransferTrigger.connect(accountA);
const [accountA, accountB] = await ethers.getSigners();
const ethTransferTrigger = await ethers.getContractAt("ETHTransferTrigger", deployedTransferTriggerAddress);
const deployedTransferTriggerAddress = "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512";
// Send crypto
const events = await scheduledMessage.queryFilter(filter, currentBlock - 10, currentBlock);
const filter = scheduledMessage.filters.MessageReleased();
const currentBlock = await ethers.provider.getBlockNumber();
const scheduledMessage2 = await ethers.getContractAt("ScheduledMessage", deployedScheduleAddressCpy);
const deployedScheduleAddressCpy = "0x5FbDB2315678afecb367f032d93F642f64180aa3";
console.log("MessageReleased events:", events);
const events = await scheduledMessage.queryFilter(filter, currentBlock - 10, currentBlock);
const filter = scheduledMessage.filters.MessageReleased();
const currentBlock = await ethers.provider.getBlockNumber();
console.log("Transfer and trigger transaction completed");
await tx4.wait();
const tx4 = await triggerWithA.transferAndTrigger(accountB.address, { value: ethers.utils.parseEther("0.1") });
const triggerWithA = ethTransferTrigger.connect(accountA);
console.log("Account A:", accountA.address, "Account B:", accountB.address);
const accountB = signers[1];
const accountA = signers[0];
const signers = await ethers.getSigners();
console.log("ETHTransferTrigger contract at:", ethTransferTrigger.address);
const ethTransferTrigger = await ethers.getContractAt("ETHTransferTrigger", deployedTransferTriggerAddress);
const deployedTransferTriggerAddress = "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512";
const tx4 = await triggerWithA.transferAndTrigger(accountB.address, { value: ethers.utils.parseEther("0.1") });
const triggerWithA = ethTransferTrigger.connect(accountA);
const tx3 = await triggerWithA.transferAndTrigger(accountB.address, { value: ethers.utils.parseEther("0.1") });
const triggerWithA = ethTransferTrigger.connect(accountA);
const tx3 = await triggerWithA.transferAndTrigger(accountB.address, { value: ethers.utils.parseEther("0.1") });
await tx2.wait();
const tx2 = await triggerWithA.transferAndTrigger(accountB.address, { value: ethers.utils.parseEther("0.1") });
const triggerWithA = ethTransferTrigger.connect(accountA);
const [accountA, accountB] = await ethers.getSigners();
await tx2.wait();
const tx2 = await triggerWithA.transferAndTrigger(accountB.address, { value: ethers.utils.parseEther("0.1") });
const triggerWithA = ethTransferTrigger.connect(accountA);
const [accountA, accountB] = await ethers.getSigners();
const ethTransferTrigger = await ethers.getContractAt("ETHTransferTrigger", deployedTransferTriggerAddress);
const deployedTransferTriggerAddress = "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512";
    });
      value: ethers.utils.parseEther("1.0"), // Sends exactly 1.0 ether
      to: operator.address,
await owner.sendTransaction({
const [owner,  feeCollector, operator] = await ethers.getSigners();
await tx2.wait();
const tx2 = await triggerWithA.transferAndTrigger(accountB.address, { value: ethers.utils.parseEther("0.1") });
const triggerWithA = ethTransferTrigger.connect(accountA);
const [accountA, accountB] = await ethers.getSigners();
const ethTransferTrigger = await ethers.getContractAt("ETHTransferTrigger", deployedTransferTriggerAddress);
const deployedTransferTriggerAddress = "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512";
await tx.wait();
const tx = await scheduledMessage.scheduleMessage(encryptedMessage, 3, hint);
const hint = "Vratnice";
const scheduledMessage = await ethers.getContractAt("ScheduledMessage", deployedScheduleAddress);
const encryptedMessage = "K/7D5HCgz/qwrJeJmKoMLN/xxOSaHXsgU68dvK6+QwM8UjZJS3PZY0hskOSpDwtwiE8DXhaou7z/WLEOgf+DJQCp+AhQ/FuQNzb+TEykv1GYtkqfVoVc5vbJqvkp2IJUA6cXzoo2HD7UfkuGY5X+hxkllkh5yiRvdXmEPS8k1nHbOglTIK2K6p5oxOZGGVbdAejp6keAbSsZbGWGHw+NVssudGYAgCTUvJSq5FoV3Avc1DMCNxekpU/WCkbOO9DNGdOiAInd6Bi7FH3z4TKB7WAWC5XkKmQMtj7CWp/oPBbfdq4LdBUfJEcin+cHDQQYPPF84G8SM69RuemKDXowSUH72E5OtXHURo+nqhS/VLfP5CFxmaBHHfYrXp8O3wa74F4WPpoqnuHxCCvxmF1yHaVH9TtxpgDDKmbwNKxciWn8FJAaIS0QK0le12+3Oku+4NnOihN6FKW87AOP2pqTz2OXo1regKnBbJXizfQWQ98bvGmVS1JuOMqBYTlwlFuqGckwFyPNri3D0iay3+OxdJQtTNkVAUrD3O6rY5yMEQeNOUmnMEDOMI4kRcSb35DtQZFkXVMqayKYHZvRsR6fcwnMcwx5fRXWui6k9vzwvNdt9z5/wwO1ckkA7qmpRDhJ7YWtYzIIfRk4suy+HOyoTCu8vI4b5tGquUfuexw2hXA=";
const deployedScheduleAddress = "0x5FbDB2315678afecb367f032d93F642f64180aa3";
await tx.wait();
let tx = await contract.scheduleMessage(encryptedMessage, 5, "VRATNICE");
// Example: Split "HelloWorld" into 5 parts and then append a hint "Find me near the door".
const contract = await ethers.getContractAt("ScheduledMessage", deployedAddress);
// Replace with your deployed contract address.
const deployedAddress = "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512";
const encryptedMessage = "K/7D5HCgz/qwrJeJmKoMLN/xxOSaHXsgU68dvK6+QwM8UjZJS3PZY0hskOSpDwtwiE8DXhaou7z/WLEOgf+DJQCp+AhQ/FuQNzb+TEykv1GYtkqfVoVc5vbJqvkp2IJUA6cXzoo2HD7UfkuGY5X+hxkllkh5yiRvdXmEPS8k1nHbOglTIK2K6p5oxOZGGVbdAejp6keAbSsZbGWGHw+NVssudGYAgCTUvJSq5FoV3Avc1DMCNxekpU/WCkbOO9DNGdOiAInd6Bi7FH3z4TKB7WAWC5XkKmQMtj7CWp/oPBbfdq4LdBUfJEcin+cHDQQYPPF84G8SM69RuemKDXowSUH72E5OtXHURo+nqhS/VLfP5CFxmaBHHfYrXp8O3wa74F4WPpoqnuHxCCvxmF1yHaVH9TtxpgDDKmbwNKxciWn8FJAaIS0QK0le12+3Oku+4NnOihN6FKW87AOP2pqTz2OXo1regKnBbJXizfQWQ98bvGmVS1JuOMqBYTlwlFuqGckwFyPNri3D0iay3+OxdJQtTNkVAUrD3O6rY5yMEQeNOUmnMEDOMI4kRcSb35DtQZFkXVMqayKYHZvRsR6fcwnMcwx5fRXWui6k9vzwvNdt9z5/wwO1ckkA7qmpRDhJ7YWtYzIIfRk4suy+HOyoTCu8vI4b5tGquUfuexw2hXA=";